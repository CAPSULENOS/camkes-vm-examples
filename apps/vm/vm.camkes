/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(NICTA_BSD)
 */

#include <autoconf.h>
import <std_connector.camkes>;

import "components/uart/uart.camkes";
import "components/gpio/gpio.camkes";
import "components/pilot/pilot.camkes";
import "components/VM/VM.camkes";
import "components/pwm/pwm.camkes";
import "components/spi/spi.camkes";
import "components/can/can.camkes";
import "components/clk/clk.camkes";
import "components/timer/timer.camkes";

#ifdef CONFIG_VM_VCHAN
import <Vchan/Vchan.camkes>;
import "components/helloworld/helloworld.camkes";
#endif //CONFIG_VM_VCHAN

component uartbase {
    hardware;
    dataport Buf mem;
    emits DataAvailable	irq;
}

component gpiobase {
    hardware;
    dataport Buf gpio1base;
    dataport Buf gpio2base;
    dataport Buf irqcbase;
    dataport Buf clk_tree;
    emits IRQGroup26 irq_grp26_int;
    emits IRQGroup28 irq_grp28_int;
    emits IRQGroup31 irq_grp31_int;
    emits EXINT16_31 xint16_31_int;
}

component i2c0 {
    hardware;
    dataport Buf i2c0_reg;
    emits DataAvailable i2c0_int;
}

component clkbase {
    hardware;
    dataport Buf cmu_cpu_clk;
    dataport Buf	   cmu_core_clk;
    dataport Buf cmu_top_clk;
}

component spibase {
	hardware;
	dataport Buf spi1_reg;
	emits DataAvailable spi1_int;
}

assembly {
    composition {
        component VM vm;
#ifdef CONFIG_PLAT_EXYNOS5410
        component uartbase uartbase_gcs;
        component uartbase uartbase_px4;
        component gpiobase gpiobase_obj;
        component i2c0     i2c0_obj;
        component spibase  spibase_obj;
        component clkbase   clkbase_obj;
        component timerbase timerbase_obj;

        component gpio     gpio_obj;
        component uart     uart_gcs;
        component uart     uart_px4;
        component pilot    pilot_obj;
        component pwm      pwm_obj;
        component spi      spi_obj;
        component can      can_obj;
        component clk      clk_obj;
        component timer	   timer_obj;
#endif

#ifdef CONFIG_VM_VCHAN
        component Vchan vchan_0;
        component helloworld hello;

        connection seL4RPCCall vchan(from vm.vchan_con, to vchan_0.vchan_com);
        connection seL4Notification vchan_event_init(from vchan_0.vevent_cl, to vm.vevent);
        connection seL4SharedData vchan_sharemem_0(from vm.share_mem, to vchan_0.share_mem);

        connection seL4Notification vchan_event(from vchan_0.vevent_sv, to hello.vevent);
        connection seL4SharedData hvchan_sharemem_0(from hello.share_mem, to vchan_0.share_mem);
        connection seL4RPCCall hvchan(from hello.vchan_con, to vchan_0.vchan_com);
#endif //CONFIG_VM_VCHAN

#ifdef CONFIG_PLAT_EXYNOS5410
        connection seL4HardwareMMIO gpio_mem1(from gpio_obj.gpio1base, to gpiobase_obj.gpio1base);
        connection seL4HardwareMMIO gpio_mem2(from gpio_obj.gpio2base, to gpiobase_obj.gpio2base);
        connection seL4HardwareMMIO gpio_mem3(from gpio_obj.irqcbase, to gpiobase_obj.irqcbase);
        connection seL4HardwareMMIO gpio_clk(from gpio_obj.clk_tree, to gpiobase_obj.clk_tree);

        connection seL4HardwareMMIO clk_cmu_cpu_mem(from clk_obj.cmu_cpu_clk, to clkbase_obj.cmu_cpu_clk);
        connection seL4HardwareMMIO clk_cmu_top_mem(from clk_obj.cmu_top_clk, to clkbase_obj.cmu_top_clk);
        connection seL4HardwareMMIO clk_cmu_core_mem(from clk_obj.cmu_core_clk, to clkbase_obj.cmu_core_clk);

        /* Interrupts */
        connection seL4HardwareInterrupt spi1_irq(from spibase_obj.spi1_int, to spi_obj.spi1_int);
        connection seL4HardwareInterrupt gpio_grp28_irq(from gpiobase_obj.irq_grp28_int, to gpio_obj.irq_grp28_int);
        connection seL4HardwareInterrupt gpio_grp26_irq(from gpiobase_obj.irq_grp26_int, to gpio_obj.irq_grp26_int);
        connection seL4HardwareInterrupt gpio_grp31_irq(from gpiobase_obj.irq_grp31_int, to gpio_obj.irq_grp31_int);
        connection seL4HardwareInterrupt gpio_xint16_31_irq(from gpiobase_obj.xint16_31_int, to gpio_obj.xint16_31_int);

	/* SPI connections */
        connection seL4RPCCall spi_gpio(from spi_obj.gpio, to gpio_obj.gpio);
        connection seL4RPCCall spi_clk(from spi_obj.clktree, to clk_obj.clktree);
        connection seL4HardwareMMIO spi1_mem(from spi_obj.spi1_reg, to spibase_obj.spi1_reg);

        /* Can driver */
        connection seL4RPCCall 	  can_spi(from can_obj.spi, to spi_obj.spi);
        connection seL4SharedData can_spi_channel	(from can_obj.spi_can,	to spi_obj.spi1_can);
        connection seL4Notification 	  gpio_can_int(from gpio_obj.CANInt, to can_obj.Int);
        connection seL4Notification 	  gpio_can_intAck(from can_obj.IntAck, to gpio_obj.CANIntAck);

	/* GCS hardware connection */
        connection seL4HardwareMMIO uartbase_mem(from uart_gcs.uart0base, to uartbase_gcs.mem);
        connection seL4HardwareInterrupt uartbase_irq(from uartbase_gcs.irq, to uart_gcs.interrupt);

	/* PX4 hardware connection */
        connection seL4HardwareMMIO uartpx4_mem(from uart_px4.uart0base, to uartbase_px4.mem);
        connection seL4HardwareInterrupt uartpx4_irq(from uartbase_px4.irq, to uart_px4.interrupt);

	/* Pilot connection */
        connection seL4RPCCall uart_inf(from pilot_obj.uart_gcs, to uart_gcs.uart);
        connection seL4SharedData uart_data(from pilot_obj.gcs_buf, to uart_gcs.client_buf);

        connection seL4RPCCall uartpx4_inf(from pilot_obj.uart_px4, to uart_px4.uart);
        connection seL4SharedData uartpx4_data(from pilot_obj.px4_buf, to uart_px4.client_buf);

	/* Recv connection */
        connection seL4RPCCall gcs_recv_inf(from uart_gcs.pilot, to pilot_obj.mavlink);
        connection seL4RPCCall px4_recv_inf(from uart_px4.pilot, to pilot_obj.mavlink);

        /* PWM connection */
        connection seL4HardwareMMIO      i2c0_mem(from pwm_obj.i2c0, to i2c0_obj.i2c0_reg);
        connection seL4HardwareInterrupt i2c0_irq(from i2c0_obj.i2c0_int, to pwm_obj.i2c0_int);
        connection seL4RPCCall           fd_pwm(from pilot_obj.pwm, to pwm_obj.pwm);
        connection seL4Notification pwm_sig(from pilot_obj.signal, to pwm_obj.signal);
        connection seL4Notification pwm_timer(from timer_obj.timer_update, to pwm_obj.timer_update);

	/* PWM timer connections */
        connection seL4HardwareMMIO timer_mem(from timer_obj.timerbase, to timerbase_obj.timer_reg);
        connection seL4HardwareInterrupt timer_irq(from timerbase_obj.irq, to timer_obj.irq);

	/* VM to PWM */
        connection seL4RPCCall           vm_pwm(from vm.pwm, to pwm_obj.pwm);

	/* Restart VM */
	connection seL4Notification restart_vm(from pilot_obj.restart_vm, to vm.restart_event);
#endif
    }

    configuration {
#ifdef CONFIG_PLAT_EXYNOS5410
        uartbase_gcs.mem_paddr = 0x12C30000;
        uartbase_gcs.mem_size = 0x1000;
        uartbase_gcs.irq_irq_number = 86;                        //UART1 interrupt

        uartbase_px4.mem_paddr = 0x12C10000;
        uartbase_px4.mem_size = 0x1000;
        uartbase_px4.irq_irq_number = 84;                        //UART1 interrupt

        gpiobase_obj.gpio2base_paddr = 0x14000000;
        gpiobase_obj.gpio2base_size = 0x1000;

        gpiobase_obj.gpio1base_paddr = 0x13400000;
        gpiobase_obj.gpio1base_size = 0x1000;

        gpiobase_obj.clk_tree_paddr = 0x10020000;
        gpiobase_obj.clk_tree_size = 0x1000;

        gpiobase_obj.irqcbase_paddr = 0x10440000;
        gpiobase_obj.irqcbase_size = 0x1000;

        gpiobase_obj.irq_grp26_int_irq_number = 58; //Combined IRQ group 26
        gpiobase_obj.irq_grp28_int_irq_number = 60; //Combined IRQ group 28
        gpiobase_obj.irq_grp31_int_irq_number = 63; //Combined IRQ group 31
        gpiobase_obj.xint16_31_int_irq_number = 64; //Extern Interrupt EINT16-EINT31

        spibase_obj.spi1_reg_paddr = 0x12D30000;
        spibase_obj.spi1_reg_size = 0x1000;
        spibase_obj.spi1_int_irq_number = 101;                    //SPI1  interrupt

        clkbase_obj.cmu_cpu_clk_paddr = 0x10010000;
        clkbase_obj.cmu_cpu_clk_size = 0x1000;

        clkbase_obj.cmu_core_clk_paddr = 0x10014000;
        clkbase_obj.cmu_core_clk_size = 0x1000;

        clkbase_obj.cmu_top_clk_paddr = 0x10020000;
        clkbase_obj.cmu_top_clk_size = 0x1000;

        i2c0_obj.i2c0_reg_paddr = 0x12C60000;
        i2c0_obj.i2c0_reg_size = 0x1000;
        i2c0_obj.i2c0_int_irq_number = 88;

        timerbase_obj.timer_reg_paddr = 0x12DD0000;
        timerbase_obj.timer_reg_size = 0x1000;
        timerbase_obj.irq_irq_number	       = 72;			//Timer interrupt

	uart_gcs.ID = 1;
	uart_px4.ID = 3;
        /* MMIO regions are
            0x10000000 CHIP_ID
            0x10486000 VCPU
            0x12c20000 UART2
            0x13400000 GPIO_RIGHT
            0x10040000 POWER0
            0x10041000 POWER1
            0x10042000 POWER2
            0x10043000 POWER3
            0x10044000 POWER4
            0x10050000 SYSREG
            0x10020000 CMU_TOP
            0x10014000 CMU_CORE
            0x10010000 CMU_CPU
            0x10030000 CMU_COREX
            0x10038000 CMU_MEM
            0x1001c000 CMU_ISP
            0x10018000 CMU_ACP
            0x12110000 USB EHCI
            0x12130000 USB CTRL
            0x12200000 MSH0
            0x12220000 MSH2
            0x40000000 RAM
        */
        vm.mmios = "0x10000000:0x1000:12,
                    0x10486000:0x1000:12,
                    0x12c20000:0x1000:12,
                    0x13400000:0x1000:12,
                    0x10040000:0x1000:12,
                    0x10041000:0x1000:12,
                    0x10042000:0x1000:12,
                    0x10043000:0x1000:12,
                    0x10044000:0x1000:12,
                    0x10050000:0x1000:12,
                    0x10020000:0x1000:12,
                    0x10014000:0x1000:12,
                    0x10010000:0x1000:12,
                    0x10030000:0x1000:12,
                    0x10038000:0x1000:12,
                    0x1001c000:0x1000:12,
                    0x10018000:0x1000:12,
                    0x12110000:0x1000:12,
                    0x12130000:0x1000:12,
                    0x12200000:0x1000:12,
                    0x12220000:0x1000:12,
                    0x40000000:0x20000000:21";

        /* IRQs are
            27  VTCNT (arch timer)
            85  UART2
            107 SDMMC0
            109 SDMMC2
            103 USB
        */
        vm.irqs =  "27,
                    85,
                    107,
                    109,
                    103";

#endif

#ifdef CONFIG_PLAT_TK1
        vm.mmios = "0xb0000000:0x40000000:21,
                    0x50046000:0x1000:12,
                    0x7000e000:0x1000:12,
                    0x6000c000:0x1000:12,
                    0x60004000:0x1000:12,
                    0x60006000:0x1000:12,
                    0x60005000:0x1000:12,
                    0x70000000:0x1000:12,
                    0x6000d000:0x1000:12,
                    0x7000c000:0x1000:12,
                    0x7000d000:0x1000:12,
                    0x7001b000:0x1000:12,
                    0x7009f000:0x1000:12,
                    0x60020000:0x1000:12,
                    0x70006000:0x1000:12,
                    0x7d004000:0x1000:12,
                    0x7d000000:0x1000:12,
                    0x700b0000:0x1000:12,
                    0x70030000:0x1000:12,
                    0x70031000:0x1000:12,
                    0x70038000:0x1000:12,
                    0x70300000:0x1000:12,
                    0x1003000:0x1000:12,
                    0x1000000:0x1000:12,
                    0x1001000:0x1000:12,
                    0x70020000:0x1000:12,
                    0x70021000:0x1000:12,
                    0x70027000:0x1000:12,
                    0x7d008000:0x1000:12,
                    0x70301000:0x1000:12,
                    0x02000000:0x100000:12,
                    0x13000000:0x100000:12";
        vm.irqs =  "27,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    56,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    110,
                    111,
                    113,
                    114,
                    115,
                    116,
                    118,
                    119,
                    121,
                    122,
                    124,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191";
#endif

        vm.asid_pool = true;

        vm.simple = true;
        vm.cnode_size_bits = 18;
        vm.simple_untyped24_pool = 10;

	vm.base_prio = 100;
	vm.num_extra_frame_caps = 0;
	vm.extra_frame_map_address = 0;

	vm._priority = 101;
	vm.sem_value = 0;
    }
}
